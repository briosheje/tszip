{"version":3,"file":"tszip.es5.js","sources":["../src/tszip.ts"],"sourcesContent":["// Import here Polyfills if needed. Recommended core-js (npm i -D core-js)\n// import \"core-js/fn/array.find\"\n\n/**\n * Make an iterator that aggregates elements from each of the iterables.\n *\n * @example\n * ```ts\n * // Sample usage\n * let [a,b] = [[1,2],[3,4]];\n * let zipped = [...zip(a,b)]; // or Array.from(zip(a,b));\n * console.log(zipped); // [[1,3],[2,4]]\n * ```\n * @example\n * ```ts\n * // Usage as iterable.\n * let [a,b] = [[1,2],[3,4]];\n * for (var [c,d] of zip(a,b)) {\n *  // c will be 1, then 3\n *  // d will be 2, then 4.\n *  console.log('c id', c, 'd is ', d);\n * }\n * ```\n * @export\n * @param {...Array<any>[]} args\n * @returns {IterableIterator<any[]>}\n */\nexport function* zip(...args: Array<any>[]): IterableIterator<any[]> {\n  if (args.some(r => !Array.isArray(r))) {\n    throw new Error('Zip function arguments must be instances of arrays.')\n  }\n  const longestArray = args.reduce((curr: number, next: any[]) => {\n    return (curr = next.length > curr ? next.length : curr), curr\n  }, 0)\n  for (let i = 0; i < longestArray; i++) {\n    yield [...args.map(_ => _[i] || null)]\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAiB,GAAG;;IAAC,cAAqB;iBAArB,qBAAqB,EAArB,IAAqB;QAArB,yBAAqB;;;;;gBACxC,IAAI,IAAI,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAA,CAAC,EAAE;oBACrC,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAA;iBACvE;gBACK,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,UAAC,IAAY,EAAE,IAAW;oBACzD,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,IAAI,CAAA;iBAC9D,EAAE,CAAC,CAAC,CAAA;oCACI,CAAC;;;oCACR,8BAAU,IAAI,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,GAAA,CAAC,GAAC;;gCAAtC,SAAsC,CAAA;;;;;gBAD/B,CAAC,GAAG,CAAC;;;sBAAE,CAAC,GAAG,YAAY,CAAA;8CAAvB,CAAC;;;;;gBAAwB,CAAC,EAAE,CAAA;;;;;CAGtC;;;;"}